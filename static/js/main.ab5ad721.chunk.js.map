{"version":3,"sources":["App.tsx","index.tsx"],"names":["layers","tilePrefix","tileSuffix","name","App","useState","mapInstance","setMapInstance","config","setConfig","mapRef","useRef","useEffect","options","apiKey","GOOGLE_API_KEY","loader","Loader","fetch","process","then","resp","json","load","current","initialMap","google","maps","Map","mapTypeControl","streetViewControl","fullscreenControl","minZoom","maxZoom","latLngBounds","LatLngBounds","LatLng","fitBounds","forEach","layer","overlayMapType","ImageMapType","getTileUrl","coord","zoom","numTiles","x","y","join","tileSize","Size","layerControl","document","querySelector","cloneNode","id","toggleButton","textContent","classList","add","addEventListener","contains","setOpacity","layerSlider","value","remove","parseInt","controls","ControlPosition","TOP_RIGHT","push","overlayMapTypes","className","type","min","max","ref","ReactDOM","render","StrictMode","getElementById"],"mappings":"+NAKMA,EAAS,CACb,CACEC,WACE,qGACFC,WAAY,GACZC,KAAM,kBAER,CACEF,WACE,+EACFC,WAAY,GACZC,KAAM,YAER,CACEF,WACE,+EACFC,WAAY,GACZC,KAAM,YAER,CACEF,WACE,+EACFC,WAAY,GACZC,KAAM,YAER,CACEF,WACE,wFACFC,WAAY,GACZC,KAAM,UAuHKC,MAnHf,WAAgB,IAAD,EACyBC,qBADzB,mBACNC,EADM,KACOC,EADP,OAEeF,qBAFf,mBAENG,EAFM,KAEEC,EAFF,KAGPC,EAASC,iBAAuB,MA4FtC,OA1FAC,qBAAU,WACR,GAAKJ,GAIE,GAAIA,EAAQ,CACjB,IAAMK,EAAyB,CAC7BC,OAAQN,EAAOO,gBAEXC,EAAS,IAAIC,IAAOJ,GAC1BN,EAAeS,SARfE,MAAM,GAAD,OAAIC,YAAJ,iBAA0CC,MAAK,SAACC,GAAD,OAClDA,EAAKC,OAAOF,KAAKX,QASpB,CAACD,IAEJI,qBAAU,WACJN,GACFA,EAAYiB,OAAOH,MAAK,WACtB,GAAuB,OAAnBV,EAAOc,QAAkB,CAC3B,IAEMC,EAAa,IAAIC,OAAOC,KAAKC,IAAIlB,EAAOc,QAAS,CACrDK,gBAAgB,EAChBC,mBAAmB,EACnBC,mBAAmB,EACnBC,QANY,EAOZC,QANY,KAQVC,EAAe,IAAIR,OAAOC,KAAKQ,aACjC,IAAIT,OAAOC,KAAKS,OAAO,mBAAoB,OAC3C,IAAIV,OAAOC,KAAKS,OAAO,mBAAoB,QAE7CX,EAAWY,UAAUH,GACrBlC,EAAOsC,SAAQ,SAACC,GACd,IAAIC,EAAiB,IAAId,OAAOC,KAAKc,aAAa,CAChDC,WAAY,SAACC,EAAOC,GAClB,GAAIA,EAjBI,GAiBcA,EAhBd,GAiBN,MAAO,GAET,IAAIC,EAAW,GAAKD,EAChBE,GAAMH,EAAMG,EAAID,EAAYA,GAAYA,EAC5C,MAAO,CACLN,EAAMtC,WACN2C,EACA,IACAE,EACA,IACAH,EAAMI,EACNR,EAAMrC,YACN8C,KAAK,KAETC,SAAU,IAAIvB,OAAOC,KAAKuB,KAAK,IAAK,OAKhCC,EAHgBC,SAASC,cAC7B,0BAEiCC,WAAU,GAC7CH,EAAaI,GAAKhB,EAAMpC,KAAO,WAC/B,IAAMqD,EAAeL,EAAaE,cAChC,UAEFG,EAAaC,YAAclB,EAAMpC,KACjCgD,EAAaO,UAAUC,IAAI,aAC3BH,EAAaI,iBAAiB,SAAS,WACjCT,EAAaO,UAAUG,SAAS,cAClCrB,EAAesB,WAAW,GAC1BC,EAAYC,MAAQ,IACpBb,EAAaO,UAAUO,OAAO,eAE9BzB,EAAesB,WAAW,GAC1BC,EAAYC,MAAQ,MACpBb,EAAaO,UAAUC,IAAI,iBAI/B,IAAMI,EAAcZ,EAAaE,cAC/B,gBAEFU,EAAYH,iBAAiB,SAAS,WACpCpB,EAAesB,WAAWI,SAASH,EAAYC,OAAS,QAE1DvC,EAAW0C,SAASzC,OAAOC,KAAKyC,gBAAgBC,WAAWC,KACzDnB,GAEF1B,EAAW8C,gBAAgBD,KAAK9B,YAKvC,CAAClC,IAGF,8BACE,sBAAKkE,UAAU,0BAAf,UACE,qBAAKA,UAAU,0BAAf,iCACA,sBAAKA,UAAU,0BAA0BjB,GAAG,wBAA5C,UACE,wBAAQiB,UAAU,wBAClB,uBACEC,KAAK,QACLC,IAAI,IACJC,IAAI,MACJX,MAAM,MACNQ,UAAU,cAGd,qBAAKjB,GAAG,aAAaqB,IAAKlE,EAAQ8D,UAAU,eC/IpDK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3B,SAAS4B,eAAe,W","file":"static/js/main.ab5ad721.chunk.js","sourcesContent":["import {useEffect, useRef, useState} from 'react';\nimport {Loader, LoaderOptions} from '@googlemaps/js-api-loader';\nimport './App.css';\nimport './App.sass';\n\nconst layers = [\n  {\n    tilePrefix:\n      'https://storage.googleapis.com/nico-earthshot-test/playground-map-cloud-experiment-county-borders/',\n    tileSuffix: '',\n    name: 'County Borders',\n  },\n  {\n    tilePrefix:\n      'https://storage.googleapis.com/gee-export-bucket/riley-agb-parcel-data-2021/',\n    tileSuffix: '',\n    name: 'AGB 2021',\n  },\n  {\n    tilePrefix:\n      'https://storage.googleapis.com/gee-export-bucket/riley-agb-parcel-data-2031/',\n    tileSuffix: '',\n    name: 'AGB 2031',\n  },\n  {\n    tilePrefix:\n      'https://storage.googleapis.com/gee-export-bucket/riley-agb-parcel-data-2051/',\n    tileSuffix: '',\n    name: 'AGB 2051',\n  },\n  {\n    tilePrefix:\n      'https://storage.googleapis.com/saurya-earthshot-test/playground-map-cloud-experiment/',\n    tileSuffix: '',\n    name: 'Hudak',\n  },\n];\n\nfunction App() {\n  const [mapInstance, setMapInstance] = useState<Loader>();\n  const [config, setConfig] = useState<{GOOGLE_API_KEY: string}>();\n  const mapRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!config) {\n      fetch(`${process.env.PUBLIC_URL}/config.json`).then((resp) =>\n        resp.json().then(setConfig),\n      );\n    } else if (config) {\n      const options: LoaderOptions = {\n        apiKey: config.GOOGLE_API_KEY,\n      };\n      const loader = new Loader(options);\n      setMapInstance(loader);\n    }\n  }, [config]);\n\n  useEffect(() => {\n    if (mapInstance) {\n      mapInstance.load().then(() => {\n        if (mapRef.current !== null) {\n          var minZoom = 0.0;\n          var maxZoom = 13.0;\n          const initialMap = new google.maps.Map(mapRef.current, {\n            mapTypeControl: false,\n            streetViewControl: false,\n            fullscreenControl: false,\n            minZoom: minZoom,\n            maxZoom: maxZoom,\n          });\n          var latLngBounds = new google.maps.LatLngBounds(\n            new google.maps.LatLng(42.87999999999998, -124.1),\n            new google.maps.LatLng(43.38006806800515, -123.6),\n          );\n          initialMap.fitBounds(latLngBounds);\n          layers.forEach((layer) => {\n            var overlayMapType = new google.maps.ImageMapType({\n              getTileUrl: (coord, zoom) => {\n                if (zoom < minZoom || zoom > maxZoom) {\n                  return '';\n                }\n                var numTiles = 1 << zoom;\n                var x = ((coord.x % numTiles) + numTiles) % numTiles;\n                return [\n                  layer.tilePrefix,\n                  zoom,\n                  '/',\n                  x,\n                  '/',\n                  coord.y,\n                  layer.tileSuffix,\n                ].join('');\n              },\n              tileSize: new google.maps.Size(256, 256),\n            });\n            const exampleButton = document.querySelector(\n              '#example_layer_control',\n            ) as HTMLElement;\n            const layerControl = exampleButton.cloneNode(true) as HTMLElement;\n            layerControl.id = layer.name + '_control';\n            const toggleButton = layerControl.querySelector(\n              'button',\n            ) as HTMLElement;\n            toggleButton.textContent = layer.name;\n            layerControl.classList.add('activated');\n            toggleButton.addEventListener('click', () => {\n              if (layerControl.classList.contains('activated')) {\n                overlayMapType.setOpacity(0);\n                layerSlider.value = '0';\n                layerControl.classList.remove('activated');\n              } else {\n                overlayMapType.setOpacity(1.0);\n                layerSlider.value = '100';\n                layerControl.classList.add('activated');\n              }\n            });\n\n            const layerSlider = layerControl.querySelector(\n              'input.slider',\n            ) as HTMLInputElement;\n            layerSlider.addEventListener('input', () => {\n              overlayMapType.setOpacity(parseInt(layerSlider.value) / 100);\n            });\n            initialMap.controls[google.maps.ControlPosition.TOP_RIGHT].push(\n              layerControl,\n            );\n            initialMap.overlayMapTypes.push(overlayMapType);\n          });\n        }\n      });\n    }\n  }, [mapInstance]);\n\n  return (\n    <div>\n      <div className=\"map_container container\">\n        <div className=\"title has-text-centered\">Welcome to LandX AI</div>\n        <div className=\"layer_control container\" id=\"example_layer_control\">\n          <button className=\"layer_button button\" />\n          <input\n            type=\"range\"\n            min=\"1\"\n            max=\"100\"\n            value=\"100\"\n            className=\"slider\"\n          />\n        </div>\n        <div id=\"map-canvas\" ref={mapRef} className=\"card\"></div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}